{"version":3,"sources":["constants.js","reducer.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Container/App.js","action.js","reportWebVitals.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOT_PENDING","REQUEST_ROBOT_SUCCESS","REQUEST_ROBOT_FAILED","inintialStateSearch","searchField","inintialStateRobot","isPending","robot","error","Card","id","name","email","className","alt","src","CardList","robots","map","users","index","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","props","children","App","this","onRobotRequest","searchFilter","filter","toLowerCase","includes","style","display","fontFamily","Component","connect","state","searchRobot","robotRequest","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77b16061.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOT_PENDING = \"REQUEST_ROBOT_PENDING\";\r\nexport const REQUEST_ROBOT_SUCCESS = \"REQUEST_ROBOT_SUCCESS\";\r\nexport const REQUEST_ROBOT_FAILED = \"REQUEST_ROBOT_FAILED\";","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOT_PENDING,\r\n    REQUEST_ROBOT_SUCCESS,\r\n    REQUEST_ROBOT_FAILED\r\n} from \"./constants\";\r\n\r\n\r\n\r\n\r\nconst inintialStateSearch = {\r\n    searchField: \"\"\r\n}\r\n\r\nexport const searchRobot = (state = inintialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst inintialStateRobot = {\r\n    isPending: false,\r\n    robot: [],\r\n    error: \"\"\r\n}\r\n\r\n\r\nexport const robotRequest = (state = inintialStateRobot, action = {}) => {\r\n\r\n    switch (action.type) {\r\n        case REQUEST_ROBOT_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOT_SUCCESS:\r\n            return Object.assign({}, state, { robot: action.payload, isPending: false })\r\n        case REQUEST_ROBOT_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react'\r\n\r\n\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-2\">\r\n\t\t<img alt=\"friends\" src={`https://robohash.org/${id}?150x150`}/>\r\n\t\t\t<div>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n    )\r\n\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from \"./Card\";\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div>\r\n\t\t{\r\n\t\t \trobots.map((users, index) => {\r\n\t\t\treturn \t(\r\n\t\t\t\t<Card \r\n\t\t\t\tkey={index} \r\n\t\t\t\tid={robots[index].id} \r\n\t\t\t\tname={robots[index].name} \r\n\t\t\t\temail={robots[index].email}/>\r\n\t\t\t)\r\n\t\t})\r\n\t}\r\n\t</div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\n\r\nconst SearchBox = ({onSearchChange}) => {\r\n\treturn (\r\n\t\t\t<div className=\"pa2\">\r\n\t\t\t\t<input className=\"pa3 ba b--green bg-lightest-blue\"\r\n\t\t\t\ttype=\"search\"\r\n\t\t\t\tplaceholder=\"search friends\"\r\n\t\t\t\tonChange={onSearchChange}/>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\nimport '../Container/App.css'\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div className=\"scroll\">\r\n\t\t {props.children}\r\n\t\t</div>\r\n\r\n\t\t)\r\n}\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from \"../Components/CardList\";\r\nimport SearchBox from \"../Components/SearchBox\";\r\n// import { robots } from './Robos.js'\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css';\r\n\r\nimport { setSearchField, robotRequest } from '../action';\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobot.searchField,\r\n        robots: state.robotRequest.robot,\r\n        isPending: state.robotRequest.isPending,\r\n        error: state.robotRequest.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRobotRequest: () => dispatch(robotRequest())\r\n    }\r\n}\r\n\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onRobotRequest();\r\n    }\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const searchFilter = robots.filter((robot) => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n\r\n        return isPending ?\r\n            <h1>Loading</h1> :\r\n            (\r\n                <div className=\"tc bg-light-blue\">\r\n                    <div className=\"stickyHeader\">\r\n                       <h1 style={{display: 'inline-block', fontFamily: \"cursive\"}}>RobosFriends</h1>\r\n                        <SearchBox onSearchChange={onSearchChange}/>\r\n                    </div>\r\n                    <Scroll>\r\n                        <CardList robots={searchFilter}/>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n\r\n    };\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOT_PENDING,\r\n\tREQUEST_ROBOT_SUCCESS,\r\n\tREQUEST_ROBOT_FAILED\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const robotRequest = () => (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOT_PENDING});\r\n\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOT_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOT_FAILED, payload: error}))\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobot, robotRequest } from './reducer';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport App from \"./Container/App\";\nimport 'tachyons';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst rootReducer = combineReducers({searchRobot, robotRequest});\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n\n\nReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App/>\n      </Provider>\n  </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}